// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_ad")
  role          Role            @default(USER)
  email         String          @unique
  password      String
  tokens        UserToken[]
  codes         UserCodes[]
  profile       UserProfile?
  customers     Customer[]
  monthlyTarget MonthlyTarget[]
}

model UserProfile {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_ad")
  firstName   String?
  lastName    String?
  fatherName  String?
  phoneNumber String?
  gender      Gender   @default(MALE)
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserToken {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_ad")
  refreshToken   String    @unique
  expirationDate DateTime? @map("expiration_date")
  isBlocked      Boolean   @default(false) @map("is_blocked")
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserCodes {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  type           CodeType
  code           String
  expirationDate DateTime? @map("expiration_date")
  attempts       Int       @default(0)
  isUsed         Boolean   @default(false) @map("is_used")
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, code, type], name: "codeId")
}

model Customer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_ad")
  company   String   @unique

  manager   User?   @relation(fields: [managerId], references: [id])
  managerId String?
  curator   String?

  head                     String
  position                 String?
  contactNumber            String?
  companyEstablishmentDate DateTime?
  ownersBirthday           DateTime?
  contractDate             DateTime?
  contractExpirationDate   DateTime?
  service                  String?
  source                   String?
  notes                    String?
  termsOfPayment           String?
  terminationReason        String?
  paymentAmount            Int?

  calls            CallSchedule[]
  meetings         MeetingSchedule[]
  curationCalls    CurationCall[]
  curationMeetings CurationMeeting[]
  status           CustomerStatus    @default(POTENTIAL)
}

model CallSchedule {
  id                 String      @id @default(uuid())
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_ad")
  customer           Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId         String
  notes              String?
  contactDate        DateTime?
  nextContactDate    DateTime?
  reasonForRejection String?
  result             CallResult? @default(UNKNOWN)
  category           Category?   @relation(fields: [categoryId], references: [id])
  categoryId         String?
}

model MeetingSchedule {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_ad")
  customer           Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId         String
  participant        String?
  contactNumber      String?
  position           String?
  meetingTime        String?
  meetingDate        DateTime?
  notes              String?
  contactDate        DateTime?
  nextContactDate    DateTime?
  nextMeetingDate    DateTime?
  reasonForRejection String?
  result             MeetingResult @default(UNKNOWN)
  category           Category?     @relation(fields: [categoryId], references: [id])
  categoryId         String?
}

model MonthlyTarget {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_ad")
  manager       User     @relation(fields: [managerId], references: [id])
  managerId     String
  meetingTarget Int
  month         Month
  year          Int      @default(2024)
}

model CurationCall {
  id               String    @id @default(uuid())
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_ad")
  customer         Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       String
  callDate         DateTime?
  customerFeedback String?
  customerRequests String?
  notes            String?
  meetingDate      DateTime?
}

model CurationMeeting {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_ad")
  customer           Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId         String
  meetingDate        DateTime?
  meetingTime        String?
  customerFeedback   String?
  customerRequests   String?
  nuances            String?
  referenceCompanies String?
  notes              String?
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_ad")
  name      String   @unique

  meetings MeetingSchedule[]
  calls    CallSchedule[]
}

enum CodeType {
  OTP
}

enum Gender {
  MALE
  FEMALE
}

enum CustomerStatus {
  ACTIVE
  POTENTIAL
  LOST
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum MeetingResult {
  CONTRACT_SIGNED
  WILL_BE_FOLLOWED
  REFUSED
  UNKNOWN
}

enum CallResult {
  WILL_BE_MEETING
  WILL_BE_FOLLOWED
  REFUSED
  UNKNOWN
}

enum Month {
  January
  February
  March
  April
  May
  June
  July
  August
  Septemper
  October
  November
  December
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_ad")

  email    String       @unique
  password String
  tokens   UserToken[]
  codes    UserCodes[]
  profile  UserProfile?
}

model UserProfile {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_ad")
  firstName   String?
  lastName    String?
  fatherName  String?
  phoneNumber String?
  gender      Gender   @default(MALE)
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserToken {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_ad")
  refreshToken   String    @unique
  expirationDate DateTime? @map("expiration_date")
  isBlocked      Boolean   @default(false) @map("is_blocked")
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserCodes {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  type           CodeType
  code           String
  expirationDate DateTime? @map("expiration_date")
  attempts       Int       @default(0)
  isUsed         Boolean   @default(false) @map("is_used")
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, code, type], name: "codeId")
}

model Customer {
  id                       String    @id @default(uuid())
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_ad")
  company                  String    @unique
  head                     String
  position                 String?
  contactNumber            String?
  companyEstablishmentDate DateTime?
  curator                  String?
  ownersBirthday           DateTime?
  contractDate             DateTime?
  contractExpirationDate   DateTime?
  service                  String?
  source                   String?
  notes                    String?
  termsOfPayment           String?
  terminationReason        String?
  payment                  String?

  calls    CallSchedule[]
  meetings MeetingSchedule[]
  status   CustomerStatus    @default(POTENTIAL)
}

model CallSchedule {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_ad")
  customer           Customer   @relation(fields: [customerId], references: [id])
  customerId         String
  notes              String?
  contactDate        DateTime?
  reasonForRejection String?
  result             CallResult
}

model MeetingSchedule {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_ad")
  customer           Customer      @relation(fields: [customerId], references: [id])
  customerId         String
  participant        String?
  contactNumber      String?
  position           String?
  meetingTime        DateTime?
  notes              String?
  contactDate        DateTime?
  reasonForRejection String?
  result             MeetingResult
}

enum CodeType {
  OTP
}

enum Gender {
  MALE
  FEMALE
}

enum CustomerStatus {
  ACTIVE
  POTENTIAL
  LOST
}

enum MeetingResult {
  CONTRACT_SIGNED
  WILL_BE_FOLLOWED
  REFUSED
}

enum CallResult {
  WILL_BE_MEETING
  WILL_BE_FOLLOWED
  REFUSED
}
